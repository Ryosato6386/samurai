JavaScriptはHTMファイルに記述して実行する
ーー例ーー
<!DOCTYPE html>
<html lang="ja">
    <head>
        <mate charset = "utf-8">
        <title>タイトル名</title>
    </head>
    <body>
        <script src="jsファイル名"></script>
    </body>
</html>



01〜05
<script src="jsファイル名"></script>
画面の表示前にJavaScriptの処理を実行したい場合→headタグ内
画面の表示後にJavaScriptの処理を実行したい場合→bodyタグ内の最後

四則演算
console.log(数字 + 数字)；
+	足し算	45 + 18（63）
-	引き算	30 - 12（18）
*	掛け算	15 * 6（90）
/	割り算  30 / 3（10）
%	割り算の余り　45 % 8（5）

文字の連結
console.log('吾輩は' + '猫である');

変数宣言
let 変数名 = 要素;

比較演算子
==	2つの値が等しい場合はtrueを返す（等価演算子）
===	2つの値とデータ型が等しい場合はtrueを返す（厳密等価演算子）
!=	2つの値が等しくない場合はtrueを返す
!==	2つの値とデータ型が等しくない場合はtrueを返す
>	左辺の値が右辺の値よりも大きい場合はtrueを返す
>=	左辺の値が右辺の値以上の場合はtrueを返す
<	左辺の値が右辺の値よりも小さい場合はtrueを返す
<=	左辺の値が右辺の値以下の場合はtrueを返す

06〜07
・if文について
if (条件式) {
  条件が成り立つときの処理
}

--elseの条件式--
if (条件式A) {
  条件Aが成り立つときの処理
}
else if (条件式B) {
  条件Bが成り立つときの処理  
}
else {
  どの条件も成り立たないときの処理
}


・条件による出力結果のswitch
switch (変数名) {
  case 値1:
    式が値1のときの処理
    break;
  case 値2:
    式が値2のときの処理
    break;
  case 値3:
    式が値3のときの処理
    break;
  default:
    どれも当てはまらない場合の処理
    break;
}
※「break」を記述しないと最初に一致した「case」以降の処理が全部時効されてしまうので
　都度「break」で閉じる

08~09
while文　繰り返し回数が決まっていない場合
for文　　繰り返し回数が決まっている

while (条件式) {
  条件を満たしている間、繰り返す処理
}

for (カウンタ変数の初期値; 条件式; カウンタ変数の増減値) {
  カウンタ変数が決まった値になるまで繰り返す処理
}

---配列---
const userNames = ['中身0', '中身1', '中身2', '中身3', '中身4'];
// 2番目の要素である「中身1」という文字列が出力される
console.log(userNames[1]);
// 6番目に要素を追加する（すでに存在する配列なら更新される）
userNames[5] = '中身5';

【補足】
let　再代入可能
const 再代入できない　（ただし配列の更新・追加は再代入にあたらないので可能）

10〜13
---オブジェクト化---
（配列との違い）
配列：各要素に「0」から順番に番号（インデックス）を振って管理する
オブジェクト：インデックスの代わりにキーと呼ばれるラベルをつけて管理する
（例）
const   変数名 　　　= { キー名1: '中身1', キー名2: 中身2, キー名3: '中身3' };
const personalData = { プロパティ名A: '侍太郎',   age: 36,      gender: '男性' };

// 'gender'というキーを持つ値（'男性'）が出力される　（以下のいずれも同じ値が出力される）
console.log(personalData['gender']);
console.log(personalData.gender);

---関数---
//関数の定義
const 定数名 = () => {
  一連の処理  
}
//関数の呼び出し
関数名();

（関数名の付け方）動詞＋目的
○○を追加する	add○○	addProduct（商品を追加する）
○○を削除する	remove○○	removeProduct（商品を削除する）
○○が存在するかどうかチェックする	has○○	hasProduct（商品が存在するかチェックする）
○○の状態になっているかどうかチェックする	is○○	isPurchased（購入されたかどうかチェックする）
○○が起こったときに処理を行う	on○○	onPushedButton（ボタンが押されたときに処理を行う）

---引数---
（例）
？円　＋　500円　＝　？＋500円
引数(決まっていない値)　＋　500円　＝　戻り値(計算結果)

const 定数名 = (引数名) => {
  引数を使った一連の処理  
}

14~19
---クラス----------------------------
クラスの定義{
  コンストラクタ（インスタンスの初期化）{
    インスタンスのプロパティー
  }
  メソッドの定義
}
インスタンス化
メソッドの実行や出力
-------------------------------------
  ↓↓↓↓↓↓↓↓↓↓↓↓

//---クラスの定義---
class クラス名 {
    // ---コンストラクタでインスタン化のときに初期化させる---
    constructor(プロパティ名A, プロパティ名B, プロパティ名C){
    
    // ---インスタンスにプロパティー（情報）を持たせる---
    this.プロパティ名A = プロパティ名A;
    this.プロパティ名B = プロパティ名B;
    this.プロパティ名C = プロパティ名C;
    }
        // ---メソッドの定義---
    メソッド名(){
      実行させたいこと
    }
}
// ---インスタンス化---
const インスタンス名 = new Product(プロパティーA、プロパティーB、プロパティーC);

    // ---インスタンスの値を出力---
    console.log(インスタンス名);

    // ---メソッドの実行---
    インスタンス名.メソッド名();




---通常のオブジェクトにメソッドを定義---
const 定数名 = {
    プロパティ名A: "プロパティ内容A",
    プロパティ名B: "プロパティ内容B",
    プロパティ名C: "プロパティ内容C",
    // ---メソッド定義---
    メソッド名: () => {
        実行したい内容
    }
}
    // メソッド実行
    定数名.メソッド名();

